name: Regression Check

on:
  workflow_dispatch:
    inputs:
      openhands_sha:
        required: false
        type: string
        default: ""
      issue_number:
        required: false
        type: number
        default: 32
      max_iterations:
        required: false
        type: number
        default: 50
      macro:
        required: false
        type: string
        default: "@openhands-agent"

permissions:
  contents: write
  pull-requests: write

jobs:
  regression-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Get replayio-public/OpenHands commit SHA
        id: get-sha
        run: |
          SHA=${{ inputs.openhands_sha }}
          if [ -z "$SHA" ]; then
            LATEST_SHA=$(curl -s -H "Accept: application/vnd.github.v3+json" \
              https://api.github.com/repos/replayio-public/OpenHands/branches/main \
              | jq -r .commit.sha)
            echo "Using latest openhands commit SHA: $LATEST_SHA"
            echo "SHA=$LATEST_SHA" >> $GITHUB_OUTPUT
          else
            echo "Using sha from workflow input: $SHA"
            echo "SHA=$SHA" >> $GITHUB_OUTPUT
          fi

      - name: Add a pinned dep to requirements.txt
        run: |
          echo "openhands-ai @ git+https://github.com/replayio-public/OpenHands@${{ steps.get-sha.outputs.SHA }}" >> requirements.txt
          cat requirements.txt

      - name: Cache pip dependencies
        if: github.event.label.name != 'fix-me-experimental'
        uses: actions/cache@v3
        with:
          path: ${{ env.pythonLocation }}/lib/python3.12/site-packages/*
          key: ${{ runner.os }}-pip-openhands-resolver-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-openhands-resolver-${{ hashFiles('requirements.txt') }}

      - name: Check required environment variables
        env:
          LLM_MODEL: ${{ secrets.LLM_MODEL }}
          LLM_API_KEY: ${{ secrets.LLM_API_KEY }}
          LLM_BASE_URL: ${{ secrets.LLM_BASE_URL }}
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
          PAT_USERNAME: ${{ secrets.PAT_USERNAME }}
          REPLAY_API_KEY: ${{ secrets.RECORD_REPLAY_API_KEY }}
        run: |
          required_vars=("LLM_MODEL" "LLM_API_KEY" "PAT_TOKEN" "PAT_USERNAME" "REPLAY_API_KEY")
          for var in "${required_vars[@]}"; do
            if [ -z "${!var}" ]; then
              echo "Error: Required environment variable $var is not set."
              exit 1
            fi
          done

      - name: Set environment variables
        run: |
          echo "ISSUE_NUMBER=${{ inputs.issue_number }}" >> $GITHUB_ENV
          echo "MAX_ITERATIONS=${{ inputs.max_iterations || 50 }}" >> $GITHUB_ENV
          echo "SANDBOX_ENV_GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV

      - name: Install OpenHands
        run: |
          if [ "${{ github.event.label.name }}" == "fix-me-experimental" ]; then
            python -m pip install --upgrade pip
            pip install git+https://github.com/replayio-public/openhands.git
          else
            python -m pip install --upgrade -r requirements.txt
          fi

      - name: Attempt to resolve issue
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_USERNAME: ${{ secrets.PAT_USERNAME }}
          LLM_MODEL: ${{ secrets.LLM_MODEL }}
          LLM_API_KEY: ${{ secrets.LLM_API_KEY }}
          LLM_BASE_URL: ${{ secrets.LLM_BASE_URL }}
          REPLAY_API_KEY: ${{ secrets.RECORD_REPLAY_API_KEY }}
          PYTHONPATH: ""
          DEBUG: "1"
        run: |
          cd /tmp && python -m openhands.resolver.resolve_issue \
            --repo ${{ github.repository }} \
            --issue-number ${{ env.ISSUE_NUMBER }} \
            --issue-type issue \
            --max-iterations ${{ env.MAX_ITERATIONS }} \
            --runtime-container-image="ghcr.io/replayio-public/runtime:${{ steps.get-sha.outputs.SHA }}-nikolaik"

      - name: Upload output.jsonl as artifact
        uses: actions/upload-artifact@v4
        if: always() # Upload even if the previous steps fail
        with:
          name: resolver-output
          path: /tmp/output/output.jsonl
          retention-days: 30 # Keep the artifact for 30 days

      - name: Create draft PR
        if: always() # Create PR even if the previous steps fail
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          GITHUB_USERNAME: ${{ secrets.PAT_USERNAME }}
          LLM_MODEL: ${{ secrets.LLM_MODEL }}
          LLM_API_KEY: ${{ secrets.LLM_API_KEY }}
          LLM_BASE_URL: ${{ secrets.LLM_BASE_URL }}
          PYTHONPATH: ""
        run: |
          cd /tmp && python -m openhands.resolver.send_pull_request \
            --issue-number ${{ env.ISSUE_NUMBER }} \
            --pr-type draft --send-on-failure --github-token ${{ secrets.PERSONAL_ACCESS_TOKEN }} | tee pr_result.txt && \
            grep "draft created" pr_result.txt | sed 's/.*\///g' > pr_number.txt

      - name: Status report
        uses: actions/github-script@v7
        if: always() # Check status even if the previous steps fail
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const fs = require('fs');
            const issueNumber = ${{ env.ISSUE_NUMBER }};

            let prNumber = '';
            let branchName = '';
            let logContent = '';
            const noChangesMessage = `No changes to commit for issue #${issueNumber}. Skipping commit.`;

            try {
              logContent = fs.readFileSync('/tmp/pr_result.txt', 'utf8').trim();
            } catch (error) {
              console.error('Error reading results file:', error);
            }

            try {
              prNumber = fs.readFileSync('/tmp/pr_number.txt', 'utf8').trim();
            } catch (error) {
              console.error('Error reading file:', error);
            }

            if (logContent.includes(noChangesMessage)) {
              console.log(`The workflow to fix this issue encountered an error. Openhands failed to create any code changes.`);
            } else if (prNumber) {
              console.log(`A potential fix has been generated and a draft PR #${prNumber} has been created. Please review the changes.`);
            } else {
              console.log(`The workflow to fix this issue encountered an error. Please check the [workflow logs](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}) for more information.`);
            }
